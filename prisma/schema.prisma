// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  referralCode  String?   // Their personal referral code
  referredBy    String?   // Who referred them
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  creator     Creator?
  fanOf       CreatorFan[]
  purchases   Purchase[]
  messages    Message[]
  analytics   Analytics[]
  ownedReferralCodes ReferralCode[]
  commissions Commission[]
  referrals   ReferralHierarchy[] @relation("UserReferrals")
  referrers   ReferralHierarchy[] @relation("ReferrerHierarchy")

  @@map("users")
}

model Creator {
  id          String   @id @default(cuid())
  userId      String   @unique
  handle      String   @unique
  displayName String
  bio         String?
  image       String?
  headerImage String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Stripe Connect
  stripeAccountId String?
  stripeOnboarded Boolean @default(false)
  
  // Earnings & Stats
  totalEarnings  Decimal @default(0)
  totalFans      Int     @default(0)
  totalMessages  Int     @default(0)
  totalCommissions Decimal @default(0) // Referral commissions earned
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fans          CreatorFan[]
  content       Content[]
  posts         Post[]
  conversations Conversation[]
  purchases     Purchase[]
  aiConfig      AIConfig?
  representatives Representative[]
  referralCodes ReferralCode[]

  @@map("creators")
}

model CreatorFan {
  id        String   @id @default(cuid())
  creatorId String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([creatorId, userId])
  @@map("creator_fans")
}

model Content {
  id          String      @id @default(cuid())
  creatorId   String
  title       String
  description String?
  type        ContentType
  price       Decimal     // Price to unlock
  isLocked    Boolean     @default(true)
  mediaUrl    String?
  thumbnail   String?
  unlockCount Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  creator   Creator    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  purchases Purchase[]
  messages  Message[]

  @@map("content")
}

model Conversation {
  id        String   @id @default(cuid())
  creatorId String
  fanId     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator  Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fan      User      @relation(fields: [fanId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([creatorId, fanId])
  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  contentId      String?
  text           String?
  mediaUrl       String?
  type           MessageType @default(TEXT)
  isFromCreator  Boolean
  isFromAI       Boolean     @default(false)
  isFromRep      Boolean     @default(false)
  repId          String?
  createdAt      DateTime    @default(now())

  // Relations
  conversation Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User             @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content      Content?         @relation(fields: [contentId], references: [id])
  representative Representative? @relation(fields: [repId], references: [id])

  @@map("messages")
}

model Purchase {
  id                String        @id @default(cuid())
  userId            String
  creatorId         String
  contentId         String?
  postId            String?       // For post unlocks
  amount            Decimal
  platformFee       Decimal
  creatorEarnings   Decimal
  referralCommissions Decimal     @default(0) // Total referral commissions
  stripePaymentId   String        @unique
  status            PurchaseStatus
  type              PurchaseType
  createdAt         DateTime      @default(now())
  processedAt       DateTime?

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  creator Creator  @relation(fields: [creatorId], references: [id])
  content Content? @relation(fields: [contentId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  commission Commission?

  @@map("purchases")
}

model AIConfig {
  id              String   @id @default(cuid())
  creatorId       String   @unique
  personality     String   // JSON string of personality traits
  tone            String   @default("conversational")
  topics          String   // JSON array of topics
  responseLength  String   @default("medium")
  creativity      Float    @default(0.7)
  isEnabled       Boolean  @default(false)
  systemPrompt    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("ai_configs")
}

model Representative {
  id          String   @id @default(cuid())
  creatorId   String
  userId      String
  name        String
  email       String
  isActive    Boolean  @default(true)
  permissions String   // JSON string of permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator  Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([creatorId, userId])
  @@map("representatives")
}

model Analytics {
  id         String        @id @default(cuid())
  userId     String?
  creatorId  String?
  event      AnalyticsEvent
  properties String        // JSON string
  createdAt  DateTime      @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("analytics")
}

model Post {
  id          String      @id @default(cuid())
  creatorId   String
  title       String
  content     String?
  mediaUrl    String?
  thumbnailUrl String?
  blurredUrl  String?    // Blurred version for preview
  price       Decimal    // Price to unlock
  isLocked    Boolean    @default(true)
  viewCount   Int        @default(0)
  unlockCount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  creator   Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  purchases Purchase[]

  @@map("posts")
}

model ReferralCode {
  id          String   @id @default(cuid())
  code        String   @unique
  creatorId   String?  // Creator who owns this code
  userId      String?  // User who can use this code
  maxUses     Int?     // Maximum number of uses (null = unlimited)
  currentUses Int      @default(0)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     Creator? @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions Commission[]

  @@map("referral_codes")
}

model Commission {
  id             String     @id @default(cuid())
  referralCodeId String
  purchaseId     String     @unique
  referrerId     String     // User who made the referral
  level          Int        // 1, 2, or 3 (L1, L2, L3)
  percentage     Decimal    // Commission percentage (5%, 2%, 1%)
  amount         Decimal    // Commission amount in dollars
  status         CommissionStatus @default(PENDING)
  paidAt         DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  referralCode ReferralCode @relation(fields: [referralCodeId], references: [id], onDelete: Cascade)
  purchase     Purchase     @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  referrer     User         @relation(fields: [referrerId], references: [id], onDelete: Cascade)

  @@map("commissions")
}

model ReferralHierarchy {
  id           String   @id @default(cuid())
  userId       String   // Child user
  referrerId   String   // Parent referrer
  level        Int      // Level in hierarchy (1, 2, 3)
  createdAt    DateTime @default(now())

  // Relations
  user     User @relation("UserReferrals", fields: [userId], references: [id], onDelete: Cascade)
  referrer User @relation("ReferrerHierarchy", fields: [referrerId], references: [id], onDelete: Cascade)

  @@unique([userId, referrerId, level])
  @@map("referral_hierarchy")
}

// Enums
enum ContentType {
  IMAGE
  VIDEO
  AUDIO
  TEXT
  CUSTOM
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  LOCKED_CONTENT
  TIP
  SYSTEM
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PurchaseType {
  CONTENT_UNLOCK
  TIP
  SUBSCRIPTION
  POST_UNLOCK
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}

enum AnalyticsEvent {
  VIEW_CREATOR
  CHAT_START
  UNLOCK_START
  UNLOCK_SUCCESS
  TIP_SENT
  SUBSCRIPTION_START
  POST_VIEW
  POST_UNLOCK
  REFERRAL_SIGNUP
}